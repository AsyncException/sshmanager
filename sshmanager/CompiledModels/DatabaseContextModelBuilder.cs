// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace sshmanager.CompiledModels
{
    public partial class DatabaseContextModel
    {
        partial void Initialize()
        {
            var server = ServerEntityType.Create(this);
            var user = UserEntityType.Create(this);

            UserEntityType.CreateForeignKey1(user, server);

            ServerEntityType.CreateAnnotations(server);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("ProductVersion", "8.0.3");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var server = FindEntityType("sshmanager.Models.Server")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            server.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var sshmanagerModelsServerTableBase = new TableBase("sshmanager.Models.Server", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", sshmanagerModelsServerTableBase);
            sshmanagerModelsServerTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", sshmanagerModelsServerTableBase);
            sshmanagerModelsServerTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("sshmanager.Models.Server", sshmanagerModelsServerTableBase);
            var sshmanagerModelsServerMappingBase = new TableMappingBase<ColumnMappingBase>(server, sshmanagerModelsServerTableBase, true);
            sshmanagerModelsServerTableBase.AddTypeMapping(sshmanagerModelsServerMappingBase, false);
            defaultTableMappings.Add(sshmanagerModelsServerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, server.FindProperty("Id")!, sshmanagerModelsServerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, server.FindProperty("Name")!, sshmanagerModelsServerMappingBase);

            var tableMappings = new List<TableMapping>();
            server.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var serversTable = new Table("Servers", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", serversTable);
            serversTable.Columns.Add("Id", idColumn);
            var nameColumn = new Column("Name", "TEXT", serversTable);
            serversTable.Columns.Add("Name", nameColumn);
            var pK_Servers = new UniqueConstraint("PK_Servers", serversTable, new[] { idColumn });
            serversTable.PrimaryKey = pK_Servers;
            var pK_ServersUc = RelationalModel.GetKey(this,
                "sshmanager.Models.Server",
                new[] { "Id" });
            pK_Servers.MappedKeys.Add(pK_ServersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ServersUc).Add(pK_Servers);
            serversTable.UniqueConstraints.Add("PK_Servers", pK_Servers);
            relationalModel.Tables.Add(("Servers", null), serversTable);
            var serversTableMapping = new TableMapping(server, serversTable, true);
            serversTable.AddTypeMapping(serversTableMapping, false);
            tableMappings.Add(serversTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, server.FindProperty("Id")!, serversTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, server.FindProperty("Name")!, serversTableMapping);

            var user = FindEntityType("sshmanager.Models.User")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var sshmanagerModelsUserTableBase = new TableBase("sshmanager.Models.User", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", sshmanagerModelsUserTableBase);
            sshmanagerModelsUserTableBase.Columns.Add("Id", idColumnBase0);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "TEXT", sshmanagerModelsUserTableBase);
            sshmanagerModelsUserTableBase.Columns.Add("Password", passwordColumnBase);
            var serverIdColumnBase = new ColumnBase<ColumnMappingBase>("ServerId", "TEXT", sshmanagerModelsUserTableBase);
            sshmanagerModelsUserTableBase.Columns.Add("ServerId", serverIdColumnBase);
            var usernameColumnBase = new ColumnBase<ColumnMappingBase>("Username", "TEXT", sshmanagerModelsUserTableBase);
            sshmanagerModelsUserTableBase.Columns.Add("Username", usernameColumnBase);
            relationalModel.DefaultTables.Add("sshmanager.Models.User", sshmanagerModelsUserTableBase);
            var sshmanagerModelsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, sshmanagerModelsUserTableBase, true);
            sshmanagerModelsUserTableBase.AddTypeMapping(sshmanagerModelsUserMappingBase, false);
            defaultTableMappings0.Add(sshmanagerModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, user.FindProperty("Id")!, sshmanagerModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, user.FindProperty("Password")!, sshmanagerModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serverIdColumnBase, user.FindProperty("ServerId")!, sshmanagerModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usernameColumnBase, user.FindProperty("Username")!, sshmanagerModelsUserMappingBase);

            var tableMappings0 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn0 = new Column("Id", "TEXT", usersTable);
            usersTable.Columns.Add("Id", idColumn0);
            var passwordColumn = new Column("Password", "TEXT", usersTable);
            usersTable.Columns.Add("Password", passwordColumn);
            var serverIdColumn = new Column("ServerId", "TEXT", usersTable);
            usersTable.Columns.Add("ServerId", serverIdColumn);
            var usernameColumn = new Column("Username", "TEXT", usersTable);
            usersTable.Columns.Add("Username", usernameColumn);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn0 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "sshmanager.Models.User",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            var iX_Users_ServerId = new TableIndex(
            "IX_Users_ServerId", usersTable, new[] { serverIdColumn }, false);
            var iX_Users_ServerIdIx = RelationalModel.GetIndex(this,
                "sshmanager.Models.User",
                new[] { "ServerId" });
            iX_Users_ServerId.MappedIndexes.Add(iX_Users_ServerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Users_ServerIdIx).Add(iX_Users_ServerId);
            usersTable.Indexes.Add("IX_Users_ServerId", iX_Users_ServerId);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(user, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings0.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, user.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, user.FindProperty("Password")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(serverIdColumn, user.FindProperty("ServerId")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(usernameColumn, user.FindProperty("Username")!, usersTableMapping);
            var fK_Users_Servers_ServerId = new ForeignKeyConstraint(
                "FK_Users_Servers_ServerId", usersTable, serversTable,
                new[] { serverIdColumn },
                serversTable.FindUniqueConstraint("PK_Servers")!, ReferentialAction.Cascade);
            var fK_Users_Servers_ServerIdFk = RelationalModel.GetForeignKey(this,
                "sshmanager.Models.User",
                new[] { "ServerId" },
                "sshmanager.Models.Server",
                new[] { "Id" });
            fK_Users_Servers_ServerId.MappedForeignKeys.Add(fK_Users_Servers_ServerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Users_Servers_ServerIdFk).Add(fK_Users_Servers_ServerId);
            usersTable.ForeignKeyConstraints.Add(fK_Users_Servers_ServerId);
            serversTable.ReferencingForeignKeyConstraints.Add(fK_Users_Servers_ServerId);
            return relationalModel.MakeReadOnly();
        }
    }
}
